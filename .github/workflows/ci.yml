name: Jellyseerr CI

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Lint & Test Build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    container: node:20-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Pnpm Setup
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Get pnpm store directory
        shell: sh
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        env:
          HUSKY: 0
        run: pnpm install
      - name: Lint
        run: pnpm lint
      - name: Formatting
        run: pnpm format:check
      - name: Build
        run: pnpm build

  build_and_push:
    name: Build & Publish Docker Images
    # if: github.ref == 'refs/heads/develop' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_TOKEN }}
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            COMMIT_TAG=${{ github.sha }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |-
            linux/amd64
            linux/arm64

  # discord:
  #   name: Send Discord Notification
  #   needs: build_and_push
  #   if: always() && github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip ci]')
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Get Build Job Status
  #       uses: technote-space/workflow-conclusion-action@v3
  #     - name: Combine Job Status
  #       id: status
  #       run: |
  #         failures=(neutral, skipped, timed_out, action_required)
  #         if [[ ${array[@]} =~ $WORKFLOW_CONCLUSION ]]; then
  #           echo "status=failure" >> $GITHUB_OUTPUT
  #         else
  #           echo "status=$WORKFLOW_CONCLUSION" >> $GITHUB_OUTPUT
  #         fi
  #     - name: Post Status to Discord
  #       uses: sarisia/actions-status-discord@v1
  #       with:
  #         webhook: ${{ secrets.DISCORD_WEBHOOK }}
  #         status: ${{ steps.status.outputs.status }}
  #         title: ${{ github.workflow }}
  #         nofail: true
